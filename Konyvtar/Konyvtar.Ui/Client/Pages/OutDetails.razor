@page "/odetails/{id:int}"
@inject IOutServices OutService
@inject NavigationManager NavigationManager

@if (Outs is not null)
{
    <h3>@Outs.ID Details</h3>

    <OutForm Outs="Outs" ButtonTitle="Update Out" OnValidSubmit="UpdateOut" />

    <button class="btn btn-danger form-control mt-3" @onclick="DeleteOut">Delete Out</button>
}
else if (!_isFound)
{
    <p>Person with id '@Id' is not found!</p>
}
else
{
    <p>Loading...</p>
}


@code {

    private bool _isFound = true;

    [Parameter]
    public int Id { get; set; }

    private Out? Outs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Outs = await OutService.GetOutByIdAsync(Id);
        }
        catch
        {
            _isFound = false;
        }
    }

    private async Task UpdateOut()
    {
        await OutService.UpdateOutAsync(Id, Outs);
        NavigationManager.NavigateTo("list");
    }

    private async Task DeleteOut()
    {
        await OutService.DeleteOutAsync(Id);
        NavigationManager.NavigateTo("list");
    }
}